#!/usr/bin/perl -w
# strEncode - 2012 WeakNet Labs
# Encode the URL for bypassing poorly made IDS
# Systems. coded by Douglas weaknetlabs@gmail.com
use Term::ANSIColor;
if(!$ARGV[0]){ usage(); }
# hash of URL codes:
my %Hexhash = ( 'a' => '%61', 'b' => '%62', 'c' => '%63',
	'd' => '%64','e' => '%65','f' => '%66','g' => '%67',
	'h' => '%68','i' => '%69','j' => '%6A','k' => '%6B',
	'l' => '%6C','m' => '%6D','n' => '%6E','o' => '%6F',
	'p' => '%70','q' => '%71','r' => '%72','s' => '%73',
	't' => '%74','u' => '%75','v' => '%76','w' => '%77',
	'x' => '%78','y' => '%79','z' => '%7A',' ' => '%20',
	'!' => '%21','"' => '%22','#' => '%23','$' => '%24',
	'%' => '%25','&' => '%26',"'" => '%27','(' => '%28',
	')' => '%29','*' => '%2A','+' => '%2B',',' => '%2C',
	'-' => '%2D','.' => '%2E','/' => '%2F','0' => '%30',
	'1' => '%31','2' => '%32','3' => '%33','4' => '%34',
	'5' => '%35','6' => '%36','7' => '%37','8' => '%38',
	'9' => '%39',':' => '%3A',';' => '%3B','<' => '%3C',
	'=' => '%3D','>' => '%3E','?' => '%3F','@' => '%40',
	'A' => '%41','B' => '%42','C' => '%43','D' => '%44',
	'E' => '%45','F' => '%46','G' => '%47','H' => '%48',
	'I' => '%49','J' => '%4A','K' => '%4B','L' => '%4C',
	'M' => '%4D','N' => '%4E','O' => '%4F','P' => '%50',
	'Q' => '%51','R' => '%52','S' => '%53','T' => '%54',
	'U' => '%55','V' => '%56','W' => '%57','X' => '%58',
	'Y' => '%59','Z' => '%5A','{' => '%7B','|' => '%7C',
	'}' => '%7D','~' => '%7E','[' => '%7F','\\' => '%5B',
	']' => '%5D','^' => '%5E','_' => '%5F','`' => '%60'
);
my %Dechash = (
	'!' => '33','"' => '34','#' => '35','$' => '36','%' => '37',
	'&' => '38',"'" => '39','(' => '40',')' => '41','*' => '42',
	'+' => '43',',' => '44','-' => '45','.' => '46','/' => '47',
	'0' => '48','1' => '49','2' => '50','3' => '51','4' => '52',
	'5' => '53','6' => '54','7' => '55','8' => '56','9' => '57',
	':' => '58',';' => '59','<' => '60','=' => '61','>' => '62',
	'?' => '63','@' => '64','A' => '65','B' => '66','C' => '67',
	'D' => '68','E' => '69','F' => '70','G' => '71','H' => '72',
	'I' => '73','J' => '74','K' => '75','L' => '76','M' => '77',
	'N' => '78','O' => '79','P' => '80','Q' => '81','R' => '82',
	'S' => '83','T' => '84','U' => '85','V' => '86','W' => '87',
	'X' => '88','Y' => '89','Z' => '90','[' => '91','\\' => '92',
	']' => '93','^' => '94','_' => '95','`' => '96','a' => '97',
	'b' => '98','c' => '99','d' => '100','e' => '101','f' => '102',
	'g' => '103','h' => '104','i' => '105','j' => '106','k' => '107',
	'l' => '108','m' => '109','n' => '110','o' => '111','p' => '112',
	'q' => '113','r' => '114','s' => '115','t' => '116','u' => '117',
	'v' => '118','w' => '119','x' => '120','y' => '121','z' => '122',
	'{' => '123','|' => '124','}' => '125','~' => '126', ' ' => '32'
);
my $method = "";
getArgs();
sub getArgs{ # parse the arguments:
	for($i=0;$i<=$#ARGV;$i++){
		if($ARGV[$i] eq "-u"){
			$method = "url";
		}elsif($ARGV[$i] eq "-a"){
			$method = "asc";
		}elsif($ARGV[$i] eq "-s"){
			$string = $ARGV[$i+1];
		}elsif($ARGV[$i] eq "-d"){
			$method = "dec";
		}
	}
	if(!$string){ usage("No string to parse."); } # string wasn't passed
	if($method eq "url"){ # URL encoding
		urlEnc($string);
	}elsif($method eq "asc"){ # ASCII encoding
		ascEnc($string);
	}elsif($method eq "dec"){
		urlDec($string);
	}
}
sub urlEnc{ # encode the string:
	foreach(split(//,$_[0])){
		print $Hexhash{$_};
	}
	print "\n";
}
sub urlDec{ # decode the string:
	$_[0] =~ tr/a-z/A-Z/;
	while(my ($k,$v) = each (%Hexhash)){
		$_[0] =~ s/$v/$k/g;
	}
	print $_[0] . "\n";
}
sub ascEnc{ # ASCII decoding:
	my $string = "";
	foreach(split(//,$_[0])){
		if($Dechash{$_}){
			$string .= $Dechash{$_} . ",";
		}else{
			usage("Unknown Character found in String");
		}
	}
	$string =~ s/,$//;
	print $string . "\n";
}
sub usage{
	print color 'bold white';
	print "\n  StrEncode";
	print color 'reset';
	print " - 2012 WeakNet Labs\n\n";
	print "  Usage: ./stringEnc <args>\n  Arguments:\n\t-s <STRING>\n\t-d"
		. " (Decode the URL String)\n\t-a (ASCII Encode the String)\n\t-u (En"
		. "code the URL String)\n\n";
	if($_[0]){ print "  Error: " . $_[0] . "\n\n"; } # error passed?
	exit();
}
